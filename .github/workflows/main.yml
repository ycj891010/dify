name: Build and Push API Image

# on push branches main 意思是当 main 分支有 commit 的时候触发执行这个 action
# 有很多触发方式：https://docs.github.com/zh/actions/using-workflows/triggering-a-workflow
# 也有手动运行：https://docs.github.com/zh/actions/using-workflows/manually-running-a-workflow
on:
  push:
    branches:
      - 'main'

# jobs 可以有一个或者多个，这里只有一个 job，是 build-and-push 意思是 build container and push to dockerhub
# build-and-push 的全部参数可以在这里找 https://github.com/docker/build-push-action/tree/releases/v5
jobs:
  build-and-push:
    # runs-on 指定运行 action 的镜像，一般都用 ubuntu-latest
    runs-on: ubuntu-latest
    # job 包含一系列步骤，称为 steps
    steps:
      # steps 的第一步总是检出最新的代码
      - name: Checkout
        uses: action/checkout@v4

      # 配置 arm64 平台，如果不需要 arm64 平台的镜像，可以不需要这一步，构建 arm 镜像会花额外一倍的时间，能不构建就不构建
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      # 配置 amd64 平台
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 配置 dockerhub 的账号密码，写在项目设置的 secrets 里
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 配置 build 和 push 的参数
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          # context 默认是 .
          # 其实就是 "docker build -f ./Dockerfile -t user/dify:latest ." 最后那个 "."
          context: "{{defaultContext}}:api"

          # file 默认 {context}/Dockerfile
          # 其实就是 "docker build -f ./Dockerfile -t user/dify:latest ." 的 "-f ./Dockerfile"
          # file: ./Dockerfile
          
          # 如果之前配了 QEMU 这里就能写 linux/arm64，不然就只写 linux/amd64，amd64是默认构建的，所以可以不需要这个参数
          # platforms: linux/arm64, linux/amd64
          
          # push 肯定要 true
          push: true
          
          # tags 设置成 {用户名}/{项目名}:{tag} 的形式，用户名是 dockerhub 的用户名
          # 其实就是 "docker build -f ./Dockerfile -t user/dify:latest ." 的 "-t user/dify:latest"
          tags: yangchunjie/dify:latest
